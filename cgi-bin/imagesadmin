#!/usr/bin/perl -wT

######################################################################
#
# imagesadmin will create and populate the images database used by images
#
# Copyright (C) 2005-2006 Rob Nugen
# 
#    This program is free software; you can redistribute it and/or
#    modify it under the same terms as Perl itself.
#
######################################################################
#
# version 0.010  17 July 2006  can display tree in left hand column, and click to display tree on right
#
######################################################################

######################################################################
#
# Plans: up through version 1.0, all tables will be required.  After
# version 1.0, we will make only the image tables be required.  The
# other tables will be arbitrary, allowing us to search on any
# attribute we like.
#
######################################################################

use lib qw (.);  # allows these to be used with switch  -T (taint mode)
# to use modules installed in my user space
use lib "/home/barefoot_rob/perlmods/share/perl"; 
use lib "/home/barefoot_rob/perlmods/share/perl/5.8"; 

# load in the modules
use strict;
use CGI 3.20;  # new version is only in my local space.  It corrects a bug with hidden fields not displaying id
use CGI::Ajax;
use CGI::Cookie;

# Below usage for -T taint mode came from here:  http://www.unix.org.ua/orelly/linux/cgi/ch05_02.htm

$CGI::DISABLE_UPLOADS = 1;
$CGI::POST_MAX        = 102_400;   #  100 KB

$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Above usage for -T taint mode came from here:  http://www.unix.org.ua/orelly/linux/cgi/ch05_02.htm

use Image::Magick;
use Error qw(:try);
use Switch;
use Tree::Simple;
use Tree::Simple::View::DHTML;
use Tree::Simple::Visitor::LoadDirectoryTree;
use Tree::Simple::Visitor::PathToRoot;

######################################################################
#
# This is the shortest technique I found to create my own errors objects
# Note "package main" after all the definitions
#
######################################################################
package Critical_error;            use base "Error";
package mustBeAdminError;          use base "Error";
package mustCreateTablesError;     use base "Error";
package mustPopulateTablesError;   use base "Error";

package RobLoadDirectoryTree;      use base "Tree::Simple::Visitor::LoadDirectoryTree";

sub _recursiveLoad {
	my ($self, $t, $path) = @_; 
    # get a node filter if we have one
    my $filter = $self->getNodeFilter();
    
    # get the contents of the directory
    opendir(DIR, $path) || die "IO Error : Could not open directory : $!";
    # avoid the . and .. symbolic links
    my @dir_contents = grep { 
                        $_ ne File::Spec->curdir() && $_ ne File::Spec->updir()
                        } readdir(DIR);
    close(DIR);
    
    # sort them if we need to with full paths
    @dir_contents = sort { 
                        $self->{sort_function}->($path, $a, $b) 
                    } @dir_contents if $self->{sort_function};

    # now traverse ...
	foreach my $item (@dir_contents) {
        # filter based on the item name
        $filter->($item,$path) || next if defined($filter);
        # get the full path for checking
        # the item type and recursion
        my $full_path = File::Spec->catdir($path, $item);
		if (-d $full_path) {
            my $new_tree = $t->new($item);
            $t->addChild($new_tree);       
            $self->_recursiveLoad($new_tree, $full_path);
		}
		elsif (-f $full_path) {
            $t->addChild($t->new($item));
		}
	}
}

package main;

require "mkdef.pl";
require "allowSource.pl";
require "DB_CDE.pl";  #  DBI code from Mike Schienle
require "setCookies.pl";
require "hash_io.pl";
require "draw_navigation.pl";

my $debug = 0;
my $q = new CGI;      # will be used for params, cookies, Ajax, html output

my @allowable_actions;  # this will be set initially after we do crititcal_settings_check and check_tables_in_db

my @these_required_tables_DNE;  # if we need to create tables, this will tell what we need to create.
my @these_tables_need_data;     # the tables listed here must have data, or there's no functionality in the program.
my @these_helpful_tables_DNE;   # some tables will give more functionality if they exist.  If they do not exist they are listed in this array

my %system_status; # this will tell us what we can do in the main menu.  (what tables are available for search?, is the admin logged in? ..)

# general settings for images, output language, and db access are stored in text files that will be read into hashes, starting with %settings
my $settings_file = "/home/barefoot_rob/settings/images.settings";
my %settings;   # specifies where various files and things are located, the password to get into the system, default sizes for pics
my %lang;       # all the language we output to users; allows various languages to be available
my %dbHash;     # information on how to log in to the images database

try {
    &critical_settings_check;
    &check_tables_in_db;
}
catch Critical_error with { &critical_error_handler }
catch mustBeAdminError with { &ask_for_admin_password }
catch mustCreateTablesError with { push (@allowable_actions, "add tables") }
catch mustPopulateTablesError with { push (@allowable_actions, "populate") }
otherwise { &generic_error_handler; }
finally {  };

# DBI handles
my ($sth, $sql, $rv, $dbh, $dbData);

my $pjx = CGI::Ajax->new( 
#			  'tag_search' => \&tag_search,
			  'display_tree' => \&display_tree,
			  'create_table' => \&create_table
			  );

my $ajax_javascript_debug = 1;
my $ajax_general_debug = 0;
$pjx->JSDEBUG($ajax_javascript_debug);
$pjx->DEBUG($ajax_general_debug);

# this outputs the html for the page.

print $q->header;  # not sure why this can't go inside sub main.

print $pjx->build_html($q,\&main,""); # The extra "" keeps Ajax.pm from causing "Use of uninitialized value" warnings.
#print &main;
sub main {
    my $html = "";

    $html .= $q->start_html(-title=>$lang{'title'},
			    -script=>[{-language=>'JAVASCRIPT', -src=>$settings{'tabber js filename URL'}},     # creates the navigation tabs on the left
				      {-language=>'JAVASCRIPT', -src=>$settings{'boxover js filename URL'}},    # creates the tooltip items on tab labels
				      {-language=>'JAVASCRIPT',
				       -code=>"var tabberOptions= {'manualStartup':true}"}],
			    -style=>{-src=>'/css/example.css',
				     -code=>'.tabber{display:none}'}
			    ) . "\n";
    
    $html .= &draw_AJAX_navigation("0main&images");

    $html .= "\n" . "<table width='100%' border='1' resize='true'><tr><td width='20%'>\n";

    # begin search sidebar
    $html .= &sidebar_content;
    # end search sidebar
    $html .= "\n" . "</td> <td width='80%'>\n";

    # begin main bar
    $html .= "\n" . $q->start_div({-id=>"mainbar", -style=>"border:1px solid green; width: 100%; height: 100%"}) . "\n";
    $html .= "hello";
    $html .= $q->end_div . $q->comment("ends (id=\"mainbar\")") . "\n";
    # end main bar

    $html .= "\n" . "</td></tr></table>\n";

    $html .= &allowAjaxSource;
    $html .= <<END_script;
<script type="text/javascript">

/* Since we specified manualStartup=true, tabber will not run after
   the onload event. Instead we run it now, to prevent any delay
   while images load.
*/

tabberAutomatic(tabberOptions);

</script>
END_script

    $html .= $q->end_html;
    return $html;
}

sub sidebar_content {
    my $html;
    if ($#allowable_actions > 0) {   # this would mean there is more than one option
	$html .= "\n" . $q->start_div({-class=>"tabber", -id=>"sidebartabs", -style=>"border:1px solid blue; width: 100%; height: 100%"}) . "\n";
    }

    foreach (@allowable_actions) {
	switch ($_) {
	    case "populate"    { $html .= &sidebar_directory_tree }
	    case "add tables"  { $html .= &sidebar_add_tables }
	    else               { $html .= "could not find anything to do" }
	}
    }
    if ($#allowable_actions > 0) {
	$html .= $q->end_div . $q->comment("ends (class=\"tabber\" id=\"sidebartabs\")") . "\n";
    }
#    $html .= &sidebar_search_tab('tag');    # added just for filler while trying to get admin login to not require entire screen refresh
    return $html;
}

##################################################################
# 
#  The guts of this could be wrapped within a wrapper that returns the <div> shell if needed
# 
##################################################################
sub sidebar_add_tables {
    my $html;

    if ($#allowable_actions > 0) {
	# Use -title=>"header=[hoverbox title] body=[hoverbox body]" to get a hoverbox.  use <h2> tag to label the tab
	$html .= "\n" . $q->start_div({-class=>"tabbertab", -id=>"sdt_tab", 
				       -style=>"border: 1px solid black; width: 100%; height: 480px; overflow: none", # THESE VALS NOT CAREFULLY CHOSEN
				       -title=>"header=[A] body=[$lang{'SDT tab hover body'}]"}) . "\n";
	$html .= "\n" . $q->h2("A") . "\n";

	$html .= "\n" . $q->start_div({-id=>"rdivSDT", 
				       -style=>"border: 1px solid black; width: 100%; height: 460px; overflow: auto"}  # THESE VALS NOT CAREFULLY CHOSEN
				      );
    }

    $html .= &sidebar_add_tables_html;

    if ($#allowable_actions > 0) {
	$html .= $q->end_div . $q->comment("ends (id=\"rdivSDT\")") . "\n";

	$html .= "\n" . $q->end_div . $q->comment("ends (class=\"tabbertab\" id=\"sdt_tab\")") . "\n";
    }

    return $html;

} # sidebar_add_tables

##################################################################
# 
#  The guts of this could be wrapped within a wrapper that returns the <div> shell if needed
# 
##################################################################
sub sidebar_directory_tree {
    my $html;

    if ($#allowable_actions > 0) {
	# Use -title=>"header=[hoverbox title] body=[hoverbox body]" to get a hoverbox.  use <h2> tag to label the tab
	$html .= "\n" . $q->start_div({-class=>"tabbertab", -id=>"sdt_tab", 
				       -style=>"border: 1px solid black; width: 100%; height: 480px; overflow: none", # THESE VALS NOT CAREFULLY CHOSEN
				       -title=>"header=[$lang{'SDT tab hover title'}] body=[$lang{'SDT tab hover body'}]"}) . "\n";
	$html .= "\n" . $q->h2($lang{'sidebar directory tree tab'}) . "\n";

	$html .= "\n" . $q->start_div({-id=>"rdivSDT", 
				       -style=>"border: 1px solid black; width: 100%; height: 460px; overflow: auto"}  # THESE VALS NOT CAREFULLY CHOSEN
				      );
    }

    $html .= &tree_html;

    if ($#allowable_actions > 0) {
	$html .= $q->end_div . $q->comment("ends (id=\"rdivSDT\")") . "\n";

	$html .= "\n" . $q->end_div . $q->comment("ends (class=\"tabbertab\" id=\"sdt_tab\")") . "\n";
    }

    return $html;

} # sidebar_directory_tree


# I am debating between letting users create each table one at a time as they like, versus just creating all of them.  Version 2 is supposed to allow
# various tables to be created (not require all of them), but this logic was already written before deciding to force V1 to require all of them.  In
# the case of requiring all, it should just be part of the initialization, a la Gallery2, setup: Enter your new password twice; Enter DB details;
# these get written to file and then tables automagically created.

# In this case, there needs to be some feedback to the users as each table is created, but only if it was created correctly.
sub sidebar_add_tables_html {
    my $html = $q->p("must create these:");

    foreach (@these_required_tables_DNE) {
	$html .= $q->start_form;
	$html .= $q->button({-value=>$_, -onClick=>"create_table(['create_" . $_ . "'], ['mainbar'] ); return true;"});
	$html .= "\n" . $q->hidden({-id=>"create_" . $_, -value=>$_});
	$html .= $q->end_form;
    }

    return $html;
}

sub create_table {
    my @tables_to_create = split " ", $_[0];   # there is probably a better way to do this
    my $html;

    foreach (@tables_to_create) {
	$html .= "creating " . $_;
	my $sql;
	switch ($_) {

	    case "images"      { 
		$sql = " CREATE TABLE `images` ( "
		    . "`imageID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . "`imageDate` DATETIME NULL, "
		    . "`fileDate` DATETIME NULL, "
		    . "`title` VARCHAR( $settings{'max image title length'} ) NOT NULL, "
		    . "`comment` BLOB NULL, "
		    . "`path` VARCHAR( $settings{'max path length'} ) NOT NULL, "
		    . "INDEX ( `imageDate` , `fileDate` )) "
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "image_sizes" {
		$sql = "CREATE TABLE `image_sizes` ("
		    . " `imageSizeID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . " `imageID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `w` INT(5) UNSIGNED NOT NULL, "
		    . " `h` INT(5) UNSIGNED NOT NULL, "
		    . " `name` VARCHAR( $settings{'max image filename length'} ) NOT NULL,"
		    . " INDEX (`imageID`))"
		    . " TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "tags" {
		$sql = "CREATE TABLE `tags` ("
		    . "`tagID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . "`tag_sortname` VARCHAR( $settings{'max tag length'} ) NOT NULL, "
		    . "`tag_displayname` VARCHAR( $settings{'max tag length'} ) NOT NULL, "
		    . "INDEX ( `tag_sortname` ), "
		    . "UNIQUE ( `tag_displayname` )) "
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "events" {
		$sql = "CREATE TABLE `events` ("
		    . "`eventID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . "`event_sortname` VARCHAR( $settings{'max event length'} ) NOT NULL, "
		    . "`event_displayname` VARCHAR( $settings{'max event length'} ) NOT NULL, "
		    . "INDEX ( `event_sortname` ), "
		    . "UNIQUE ( `event_displayname` )) "
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "people" {
		$sql = "CREATE TABLE `people` ("
		    . "`personID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . "`person_sortname` VARCHAR( $settings{'max person name length'} ) NOT NULL, "
		    . "`person_displayname` VARCHAR( $settings{'max person name length'} ) NOT NULL, "
		    . "INDEX ( `person_sortname` ), "
		    . "UNIQUE ( `person_displayname` )) "
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "locations" {
		$sql = "CREATE TABLE `locations` ("
		    . "`locationID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . "`location_sortname` VARCHAR( $settings{'max location length'} ) NOT NULL, "
		    . "`location_displayname` VARCHAR( $settings{'max location length'} ) NOT NULL, "
		    . "INDEX ( `location_sortname` ), "
		    . "UNIQUE ( `location_displayname` )) "
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "image_tags" {
		$sql = "CREATE TABLE `image_tags` ("
		    . " `imageID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `tagID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL,"
		    . " INDEX (`imageID`, `tagID`))"
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "image_events" {
		$sql = "CREATE TABLE `image_events` ("
		    . " `imageID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `eventID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " INDEX (`imageID`, `eventID`) )"
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "image_people" {
		$sql = "CREATE TABLE `$_` ("
		    . " `imageID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `personID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL,"
		    . " INDEX (`imageID`, `personID`))"
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }
	    case "image_locations" {
		$sql = "CREATE TABLE `$_` ("
		    . " `imageID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `locationID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL,"
		    . " INDEX (`imageID`, `locationID`))"
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by imagesadmin';";
	    }

	    else               { $html .= "<p>wot's this?</p>" }
	}

	if ($sql) {
	    $sth = $dbh->prepare( $sql );
	    $sth->execute();
	}
    }

    return $html . $sql;
}

sub tree_html {

    my %options = @_;

    my $html;
    # create a Tree::Simple object whose
    # node is path to a directory
    my $tree = Tree::Simple->new("/home/barefoot_rob/temp.robnugen.com/images/apt3");

    # create an instance of our visitor
#    my $visitor = Tree::Simple::Visitor::LoadDirectoryTree->new();
    my $visitor = RobLoadDirectoryTree->new();
  
    # set the directory sorting style
    $visitor->setSortStyle($visitor->SORT_DIRS_FIRST);
  
    # create node filter to filter out certain files and directories
    $visitor->setNodeFilter(sub {
	my ($item,$path) = @_;
 # 	$html .= $q->p($path . $item);     # print the path of each image we find
	return 0 if $item =~ m/\./;
	return 1;
    });  
  
    # pass the visitor to a Tree::Simple object
    $tree->accept($visitor);

    my $html_tree = Tree::Simple::View::DHTML->new
	($tree =>
	 ( 
	   list_type => "ordered",
	   node_formatter => sub {
	       my ($tree) = @_;
	       my $html;
	       if ($tree -> getNodeValue() =~ m|thumbs|) {
		   return;
#		   $html .= "<p>The idea here is to notice thumbnail directories and link them to their main directories</p>";
#		   return $tree -> getNodeValue() . $html;
	       }
	       else {
		   my $path_to_root = Tree::Simple::Visitor::PathToRoot->new();
		   $path_to_root->includeTrunk(1);
		   $tree->accept($path_to_root);
		   $html .= $q->start_form;
		   $html .= $q->button({-value=>">", -onClick=>"display_tree(['" . $tree->getUID() . "'], ['mainbar'] ); return true;"});
		   $html .= "\n" . $q->hidden({-id=>$tree->getUID(), -value=>$path_to_root->getPathAsString("/")});
		   $html .= $q->end_form;
		   my $okashi = "O</a> <!-- this closes the A tag created by Tree:Simple::View::DHTML, I think.  -->\n";
		   return $okashi . $tree -> getNodeValue() . $html;
	       }
	   }   # end sub for node_formatter
	   )
	 );
    # the tree now mirrors the structure of the directory 

    $html_tree->includeTrunk(1);
    $html .= $html_tree->javascript();
    $html .= $html_tree->expandPath();   # 28 Sep 2007: parameter used to be '("/home/rob/pub/images")', but removed it cause it's the old robnugen.com dir structure

    return $html;
}

# takes a tree and displays it in the main window.  this function name is too generic for its definition, but it's better than "main_window"
sub display_tree {

    my ($rooter) = @_; 
    my $html_out = "starting at " . $rooter;

    my $tree = Tree::Simple->new($rooter);

    # create an instance of our visitor
    my $visitor = Tree::Simple::Visitor::LoadDirectoryTree->new();

    # set the directory sorting style
    $visitor->setSortStyle($visitor->SORT_FILES_FIRST);

    # pass the visitor to a Tree::Simple object
    $tree->accept($visitor);

    my $html_tree = Tree::Simple::View::DHTML->new
	($tree =>
	 ( node_formatter => sub 
	   {
	       my ($tree) = @_;
	       if ($tree->isLeaf()) {
		   return $tree -> getNodeValue();
		   return "<a href='/cgi-bin/sub.pl?obj=" .
		       $tree -> getNodeValue() . "'>" .
		       $tree -> getNodeValue() . "</a>";
	       } else {
		   my $path_to_root = Tree::Simple::Visitor::PathToRoot->new();
		   $path_to_root->includeTrunk(1);
		   $tree->accept($path_to_root);
		   return "X</a> " . $tree -> getNodeValue();
	       }
	   },
	   list_type => "ordered"
	   )
	 );
  # the tree now mirrors the structure of the directory 

    $html_tree->includeTrunk(1);

    $html_out .= $html_tree->javascript();
    $html_out .= $html_tree->expandAll();
    return $html_out;

}

############################################################################################################
##
##  &critical_settings_check is supposed to make sure the system is fit for use whatsoever.
##
##  Basically:
##  *  We must be able to read the settings files into hashes
##  *  tabber.js and boxover.js are required
##  *  We must be able to access the database
##
##  If NO to any of the above, it's a critical failure from which this program cannot recover.
##    
##  But, try to fail gracefully; errors here will most likely fail during initial setup, 
##  so the user (admin) should be given an idea of which file didn't exist or had a problem, etc..
##
##  &hash_read and &DBConnect will throw errors if they fail.
##    
############################################################################################################
sub critical_settings_check {

    # this is the root of all settings in the images project
    &hash_read(\%settings,$settings_file);

    # this allows the user interface to be in different languages
    unless ($settings{'language file'}) {
	die with Critical_error(-text=>"No 'language file' entry in $settings_file.  It should point to a file with text output lines in your preferred language.");
    }
    &hash_read(\%lang,$settings{'language file'});

    unless (&admin_password_exists) {
	die with Critical_error(-text=>$lang{'admin disabled'});
    }

    # This is before the rest so random people won't see (m)any error messages by snooping around
    # this does not die, but prints an admin password entry screen before exiting
    unless (&isAdmin) {
	throw mustBeAdminError(-text=>$lang{'admin must login'});
    }

    # info on how to connect to the database
    unless ($settings{'dbHash file'}) {
	my $err_txt = $lang{'no dbHash file'} || "No 'dbHash file' entry in $settings_file.  It should point to a file with mySQL connection settings.";
	die with Critical_error(-text=>$err_txt);
    }
    &hash_read(\%dbHash,$settings{'dbHash file'});

    unless (-f $settings{'URL file base'} . $settings{'tabber js filename URL'}) {
	my $err_txt = $lang{'no tabber.js file'} || "No 'tabber js filename URL' entry in $settings_file.  It should point to publicly available tabber.js";
	die with Critical_error(-text=>$err_txt);
    }

    unless (-f $settings{'URL file base'} . $settings{'boxover js filename URL'}) {
	my $err_txt = $lang{'no boxover.js file'} || "No 'boxover js filename URL' entry in $settings_file.  It should point to publicly available boxover.js";
	die with Critical_error(-text=>$err_txt);
    }

    # Make sure we can get to the database.
    $dbh = &DBConnect(%dbHash);

}  # &critical_settings_check

sub admin_password_exists {
   return mkdef($settings{'content admin password'}) ? 1 : 0;
}

sub isAdmin {
    my %read_cookies = fetch CGI::Cookie;
    my %write_cookies;
    my $images_admin_password;
    $debug && warn ("in isAdmin");
    if ($images_admin_password = $q->param($settings{'name of admin pw field'})) {
	$write_cookies{$settings{'name of admin pw field'}} = $images_admin_password;
	&setCookies(%write_cookies);
    }
    elsif ($read_cookies{$settings{'name of admin pw field'}}) {
	$images_admin_password = $read_cookies{$settings{'name of admin pw field'}}->value;
    }

    if ($images_admin_password eq $settings{'content admin password'}) {
	return 1;
    }
    # else
    0;    # somehow this seems more dramatically false.
}

######################################################
##
##  We have come to a problem that cannot be resolved by this script.
##  Exit and display hopefully useful information.
##
######################################################
sub critical_error_handler {
    my $err = shift;

    print $q->header;
    print $q->start_html($lang{'title'});
    print $q->p("Sorry.. ", $err->{"-text"});
    print $q->p("This is a critical error from which I cannot recover.");
    print $q->end_html;

    warn ("A critical error occured: ", $err->{"-text"});
    exit;
}


######################################################
##
##  We have come to a problem that can be resolved by the
##  administrator.  But we didn't find a param or cookie with
##  (correct) administrator password, so ask for it.
##
######################################################
sub ask_for_admin_password {

    print $q->header;
    print $q->start_html($lang{'title'});
    print $q->p($lang{'enter admin password'});
    print $q->start_form;
    print $q->textfield(-name=>$settings{'name of admin pw field'},-size=>20,-maxlength=>20), "\n";
    print $q->end_form;
    print $q->end_html;
    exit;
}

sub generic_error_handler {
    warn ("imagesadmin error handling is in otherwise-BLOCK, which means we are catching an unexpected error.");
    my $err = shift;
    warn ($err->{"-text"});

    print $q->header;
    print $q->start_html("imagesadmin");
    print $q->p($err);
    print $q->end_html;
    exit;
}


##   
##      mySQL code used to create tables:
##   
#######################################################################################################################
##   
##  
#######################################################################################################################



# leftover from images for users sub sidebar_search_tab {
# leftover from images for users     my ($tabtype) = shift;
# leftover from images for users     my $html;
# leftover from images for users 
# leftover from images for users     $debug && warn ("in sidebar $tabtype");
# leftover from images for users     # Use -title=>"header=[hoverbox title] body=[hoverbox body]" to get a hoverbox.  use <h2> tag to label the tab
# leftover from images for users     $html .= "\n" . $q->start_div({-class=>"tabbertab", -id=>$tabtype . "searchtab", 
# leftover from images for users 				   -style=>"border: 1px solid black; width: 100px; height: 480px; overflow: none", # THESE VALS NOT CAREFULLY CHOSEN
# leftover from images for users 				   -title=>"header=[$lang{$tabtype . ' tab hover title'}] body=[$lang{$tabtype . ' tab hover body'}]"}) . "\n";
# leftover from images for users     $html .= "\n" . $q->h2($lang{$tabtype . ' tab'}) . "\n";
# leftover from images for users 
# leftover from images for users     $html .= "\n" . $q->start_form;
# leftover from images for users     $html .= "\n" . $q->textfield({-name=>$tabtype, -id=>$tabtype . "field", -onkeyup=>$tabtype . "_search( ['" . $tabtype . "field'], ['rdiv$tabtype'] ); return true;"}). "\n"; 
# leftover from images for users     $html .= $q->end_form. "\n";
# leftover from images for users     $html .= "\n" . $q->start_div({-id=>"rdiv$tabtype", 
# leftover from images for users 				   -style=>"border: 1px solid black; width: 80px; height: 460px; overflow: auto"}  # THESE VALS NOT CAREFULLY CHOSEN
# leftover from images for users 				  );
# leftover from images for users     $html .= $q->end_div . $q->comment("ends (id=\"rdiv$tabtype\")") . "\n";
# leftover from images for users 
# leftover from images for users     $html .= "\n" . $q->end_div . $q->comment("ends (class=\"tabbertab\" id=\"" . $tabtype . "searchtab\")") . "\n";
# leftover from images for users 
# leftover from images for users     return $html;
# leftover from images for users } # end sidebar_search_tab


# just leftover from images for userssub tag_search {
# just leftover from images for users    my ($tag) = @_;
# just leftover from images for users    my $html = "";
# just leftover from images for users
# just leftover from images for users    $debug && warn ("in tag_search");
# just leftover from images for users    # set up DB connection
# just leftover from images for users    unless ($dbh = &DBConnect(%dbHash)) {
# just leftover from images for users	$html .= $q->p($lang{'cannot reach db'});
# just leftover from images for users	return $html;
# just leftover from images for users    }
# just leftover from images for users    $sql = qq< select * from tags where tag_sortname like ? or tag_displayname like ? order by tag_sortname>;
# just leftover from images for users    $sth = $dbh->prepare( $sql );
# just leftover from images for users    $sth->execute( $tag . '%', $tag . '%');
# just leftover from images for users
# just leftover from images for users    if ($sth->rows()) {
# just leftover from images for users	my @items;
# just leftover from images for users	while ( my $row = $sth->fetch() ) {
# just leftover from images for users#	    warn ("images::tag_search found $tag");
# just leftover from images for users	    push (@items, $row->[2]);
# just leftover from images for users	}
# just leftover from images for users	my $list_length = $settings{'max search list length'} || 25;
# just leftover from images for users	$list_length = (2+$#items) if ((2+$#items) < $list_length);
# just leftover from images for users	$html .= $q-> scrolling_list(-name=>'tag_matches',
# just leftover from images for users				     -id=>'tag_matches',
# just leftover from images for users				     -onChange=>"main_fart(['tag_matches'], ['mainbar'] ); return true;",
# just leftover from images for users				     -values=>\@items,
# just leftover from images for users				     -default=>$items[0],
# just leftover from images for users				     -size=>$list_length,
# just leftover from images for users				     -multiple=>"true");
# just leftover from images for users    } else {
# just leftover from images for users	$html .= $lang{"no tag starts with"} . " " . $tag;
# just leftover from images for users    }
# just leftover from images for users    # disconnect from the database causes $html not to be returned
# just leftover from images for users    # &DBDisconnect();
# just leftover from images for users
# just leftover from images for users    return $html;
# just leftover from images for users}

# leftover crapsub sidebar_event_tab {
# leftover crap     my $html;
# leftover crap     # Use -title=>"header=[hoverbox title] body=[hoverbox body]" to get a hoverbox.  use <h2> tag to label the tab
# leftover crap     $html .= "\n" . $q->start_div({-class=>"tabbertab", -id=>"eventsearchtab", 
# leftover crap 				   -title=>"header=[$lang{'event tab hover title'}] body=[$lang{'event tab hover body'}]"}) . "\n";
# leftover crap     $html .= "\n" . $q->h2($lang{'event tab'}) . "\n";
# leftover crap 
# leftover crap     $html .= $q->p("spam");  # we need to learn how to hide and display things.  right now the tag search field is hardcoded onto the front page.  That shit ain't going to work.  Need to have a hideable sidebar with various content in it.  Hideable is optional, but gotta allow tags / cal / event / random to be browsed/searched");
# leftover crap 
# leftover crap     $html .= "\n" . $q->end_div . $q->comment("ends (class=\"tabbertab\" id=\"eventsearchtab\")") . "\n";
# leftover crap     return $html;
# leftover crap } # end sidebar_event_tab


# Image::Magick vars
my ($img, $imageData, $thumbData, $err);


#!     $file{'image'} = $filename;
#!     $file{'data'} = $binary_image_data;

#! use this I::M and DBI code     # convert image to thumbnail
#! use this I::M and DBI code     $img = new Image::Magick;
#! use this I::M and DBI code     $err = $img->Read($file{'image'});
#! use this I::M and DBI code     die "Can't read image file: $err\n" if $err;
#! use this I::M and DBI code     $imageData = $img->ImageToBlob();
#! use this I::M and DBI code     $err = $img->Scale(geometry=>"200x200");
#! use this I::M and DBI code     die "Can not scale image file: $err" if $err;
#! use this I::M and DBI code     $thumbData = $img->ImageToBlob();
#! use this I::M and DBI code     
#! use this I::M and DBI code     # build, prepare and execute SQL command
#! use this I::M and DBI code     $sql = "REPLACE INTO Gallery 
#! use this I::M and DBI code       (Date, Image, Thumb, Type, Title, 
#! use this I::M and DBI code       Comments, Category)
#! use this I::M and DBI code       VALUES (NOW(), ?, ?, ?, ?, ?, ?)";
#! use this I::M and DBI code     $sth = $dbh->prepare($sql)
#! use this I::M and DBI code       or DBError("Died in prepare");
#! use this I::M and DBI code     $sth->execute($imageData, $thumbData, 
#! use this I::M and DBI code       $content_type, $title, $comments, 
#! use this I::M and DBI code       $category)
#! use this I::M and DBI code       or DBError("Died in execute");
#! use this I::M and DBI code 
#! use this I::M and DBI code     # get the last inserted ID to build a URL
#! use this I::M and DBI code     $sql = "SELECT ID FROM Gallery 
#! use this I::M and DBI code       WHERE ID=LAST_INSERT_ID()";
#! use this I::M and DBI code     $sth = $dbh->prepare($sql)
#! use this I::M and DBI code       or DBError("Died in prepare");
#! use this I::M and DBI code     $sth->execute()
#! use this I::M and DBI code       or DBError("Died in execute");
#! use this I::M and DBI code     $dbData = $sth->fetchrow_hashref();
#! use this I::M and DBI code     $sth->finish();
#! use this I::M and DBI code     $id = $dbData->{'ID'};
#! use this I::M and DBI code 

#======############################################################################################################
#======##
#======##  If we can reach the database, then check for images and search attribute tables.
#======##  &check_tables_in_db
#======##  
#======##    Are there tables in the database?             (N -> allow admin login and start creating tables)
#======##    Are there attribute tables for search?        (N -> allow admin login to create the tables)
#======##
#======## not yet checked:   Are there pictures in the images table?       (N -> allow admin login and import images)
#======##
#======##  First, compare tables that exist to tables that are needed
#======##
#======##  The search attribute tables are desireable, but not necessary for
#======##  use.  So, if they don't exist, the system will still work for
#======##  users, but just with limited functionality.  This is controlled by
#======##  %system_status hash.  "TABLENAME exists" and "search TABLENAME"
#======##  exist in the hash for required and desireable tables,
#======##  respectively.
#======##
#======############################################################################################################

############################################################################################################
#
#  &check_tables_in_db ensures all tables exist.  In version 2 of this code, we will start looking a bit more subtley
#
############################################################################################################
sub check_tables_in_db {
    
    my @row;
    my %table_exists;
    my @have_useful_table;
    my %num_rows;

    $sth = $dbh->prepare("show table status;"); 
    $sth->execute;

    # keep track of tables that exist
    while (@row = $sth->fetchrow_array) {
	my $tablename = $row[0];
	my $numrows = $row[4];
	$debug && warn ($tablename . ":" . $numrows);
	$table_exists{$tablename} = 1;
	$num_rows{$tablename} = $numrows;
    }

    # compare existing tables (%table_exists) to list of required tables ($settings{'required tables'})
    foreach my $needed_table (split " ", $settings{'required tables'}) {
	unless ($table_exists{$needed_table}) {
	    push (@these_required_tables_DNE, $needed_table);
	}
    }

    foreach my $need_data (split " ", $settings{'require data'}) {
	$debug && warn $need_data;
	unless ($num_rows{$need_data}) {
	    push (@these_tables_need_data, $need_data);
	}
    }
# maybe ver. 2.0	if ($table_exists{$needed_table}) {
# maybe ver. 2.0	    #  This will determine what tabs will be available in the main menu.
# maybe ver. 2.0	    $system_status{$needed_table . ' exists'} = 1;
# maybe ver. 2.0	} 
# maybe ver. 2.0	else
# maybe ver. 2.0	{
# maybe ver. 2.0	    push (@these_required_tables_DNE, $needed_table);
# maybe ver. 2.0	}
# maybe ver. 2.0    }

# maybe ver. 2.0    # compare existing tables (%table_exists) to list of usesful tables ($settings{'useful tables'})
# maybe ver. 2.0    foreach my $wanted_table (split " ", $settings{'useful tables'}) {
# maybe ver. 2.0	if ($table_exists{$wanted_table}) {
# maybe ver. 2.0	    #  specify that it's okay to use the table.  This information
# maybe ver. 2.0	    #  will determine what tabs will be available in the main menu.
# maybe ver. 2.0	    $system_status{'search ' . $wanted_table} = 1;
# maybe ver. 2.0	} 
# maybe ver. 2.0	else
# maybe ver. 2.0	{
# maybe ver. 2.0	    push (@these_helpful_tables_DNE, $wanted_table);
# maybe ver. 2.0	}
# maybe ver. 2.0    }

    unless ($#these_required_tables_DNE == -1) {
	throw mustCreateTablesError();
    }

    unless ($#these_tables_need_data == -1) {
	throw mustPopulateTablesError();
    }

    
}
