#!/usr/bin/perl -w

######################################################################
#
# map.pl is my bit of code to test HTML::GoogleMaps
#
# Copyright (C) 2005-2006 Rob Nugen
# 
#    This program is free software; you can redistribute it and/or
#    modify it under the same terms as Perl itself.
#
######################################################################

require "allowSource.pl";

use lib "/home/thunderrabbit/perlmods/share/perl";  # to use modules installed in my user space (in this case Ajax)
use lib "/home/thunderrabbit/perlmods/lib/perl/";

use strict;
use HTML::GoogleMaps;
use Geo::Coordinates::UTM;


my $map = HTML::GoogleMaps->new(height => 600, width => 800, key => "ABQIAAAAXMHwCUq381E_Cy2EYzxthBRbMXuv5wLmqXhgs8QfSNUupYnF1hSD6H_1A6kyHo3JZhsB9_v2TFcHsQ");
$map->center([139.64477, 35.62712]);
$map->zoom(10);
$map->controls("large_map_control", "map_type_control");
$map->map_type("hybrid");

my @pizoints = [[139.64477, 35.62712], [139.65339, 35.6303] , [139.65773, 35.63127] , [139.6609, 35.63312] , [139.66451,35.63543] , [139.66571, 35.63651] , [139.67039, 35.64285] , [139.67129, 35.64366] , [139.67227, 35.644] , [139.68472, 35.65081] , [139.68661,35.65168] , [139.69313, 35.65387] , [139.6936, 35.65419] , [139.69476, 35.65555] , [139.69545, 35.6559] , [139.69931, 35.65687] , [139.70219,35.65788] , [139.70296, 35.65813] , [139.7024, 35.65952] , [139.70206, 35.66388] , [139.70232, 35.6644] , [139.70545, 35.66848] , [139.70819,35.67218] , [139.70725, 35.67427] , [139.70613, 35.67769] , [139.70468, 35.6795] , [139.70459, 35.68358] , [139.70386, 35.68448] , [139.70283,35.68787] , [139.70674, 35.69376] , [139.70746, 35.69787] , [139.70905, 35.7085] , [139.71004, 35.71146] , [139.70755, 35.71195] , [139.70399,35.71379] , [139.703, 35.71373] , [139.70189, 35.71348] , [139.70094, 35.71296] , [139.69953, 35.7123] , [139.70094, 35.71296] , [139.70189, 35.71348], [139.703, 35.71373] , [139.70399, 35.71379] , [139.70755, 35.71195] , [139.71004, 35.71146] , [139.70905, 35.7085] , [139.70746, 35.69787] ,[139.70674, 35.69376] , [139.70283, 35.68787] , [139.70386, 35.68448] , [139.70459, 35.68358] , [139.70468, 35.6795] , [139.70613, 35.67769] ,[139.70725, 35.67427] , [139.70819, 35.67218] , [139.70545, 35.66848] , [139.70232, 35.6644] , [139.70206, 35.66388] , [139.7024, 35.65952] ,[139.70296, 35.65813] , [139.70219, 35.65788] , [139.69931, 35.65687] , [139.69545, 35.6559] , [139.69476, 35.65555] , [139.6936, 35.65419] ,[139.69313, 35.65387] , [139.68661, 35.65168] , [139.68472, 35.65081] , [139.67227, 35.644] , [139.67129, 35.64366] , [139.67039, 35.64285] ,[139.66571, 35.63651] , [139.66451, 35.63543] , [139.6609, 35.63312] , [139.65773, 35.63127] , [139.65339, 35.6303] , [139.64477, 35.62712] ,[139.6376, 35.62395] , [139.63193, 35.6213] , [139.6312, 35.62119] , [139.62816, 35.6175] , [139.62708, 35.61303] , [139.62683, 35.6124] , [139.62327,35.60815] , [139.61872, 35.60999] , [139.61678, 35.60937] , [139.61069, 35.60637] , [139.60936, 35.60577] , [139.60717, 35.60399] , [139.60679,35.60354] , [139.60503, 35.59942] , [139.60194, 35.59345] , [139.60134, 35.59216] , [139.59919, 35.5863] , [139.59812, 35.58358] , [139.59764,35.58278] , [139.59709, 35.58215] , [139.58898, 35.57873] , [139.57996, 35.57684] , [139.57099, 35.57464] , [139.57074, 35.57454] , [139.56949,35.57387] , [139.56868, 35.57314] , [139.56816, 35.57216] , [139.56469, 35.56787] , [139.56267, 35.56483] , [139.55932, 35.56152] , [139.55795,35.56043] , [139.55636, 35.55963] , [139.54589, 35.55481] , [139.54228, 35.55317] , [139.53924, 35.55171] , [139.53323, 35.5486] , [139.52769,35.54588] , [139.52186, 35.54312] , [139.51508, 35.54001] , [139.51375, 35.53938] , [139.51147, 35.53756] , [139.50735, 35.53421] , [139.50246,35.5303] , [139.49928, 35.52807] , [139.49628, 35.5273] , [139.49388, 35.52656] , [139.49212, 35.52548] , [139.48559, 35.52038] , [139.48422,35.51944] , [139.48134, 35.51549] , [139.48044, 35.51448] , [139.47851, 35.5127] , [139.47285, 35.5063] , [139.46757, 35.50015] , [139.46452,35.49387] , [139.46332, 35.49131] , [139.46375, 35.48737] , [139.46032, 35.48509] , [139.44783, 35.48017] , [139.44384, 35.47853] , [139.44272,35.47839] , [139.42882, 35.4788] , [139.42143, 35.47894] , [139.41912, 35.47856] , [139.41706, 35.47769] , [139.41581, 35.47667] , [139.40899,35.46926] , [139.4077, 35.46794] , [139.40577, 35.46601] , [139.40375, 35.46465] , [139.40139, 35.46392] , [139.39247, 35.46378] , [139.38659,35.46416] , [139.37805, 35.46475] , [139.378, 35.46273] , [139.3778, 35.46182]];

 my $dog = $map->add_polyline(points=>@pizoints);

my ($head, $mapa, $body) = $map->render;

print "Content-Type: text/html\n\n";
print "<html><head><title>tight</title>$head</head><body>\n";
print "<table><tr><td>$mapa $body</td><td>";
&allowSource;

my $distance = 0;
my ($lat1, $long1, $lat2, $long2) = (undef,undef,undef,undef);

foreach my $pizoint (@pizoints) {
    foreach (@$pizoint) {
	($lat2, $long2) = ($lat1, $long1);  # give them the previous values
	($long1, $lat1) = ($$_[0], $$_[1]);  # NOTICE THE REVERSED ORDER OF LAT AND LONG required for add_polyline vs this

	if ($lat2 && $long2) {
	    my (undef, $e1, $n1) = latlon_to_utm('clarke 1866', $lat1, $long1);
	    my (undef, $e2, $n2) = latlon_to_utm('clarke 1866', $lat2, $long2);
	    $distance += sqrt(($e1-$e2)**2 + ($n1-$n2)**2);
	}
    }
};

my $l = sprintf ("%.3f kilometers", ($distance / 1000));
print $l;
print "</td></tr></table>";
print "</body></html>";
