#!/usr/bin/perl -w

######################################################################
#
# mapsadmin is copied from imagesadmin.  I want the table creation functionality and perhaps toy with AJAX and google maps at the same time.
#
# Copyright (C) 2005-2006 Rob Nugen
# 
#    This program is free software; you can redistribute it and/or
#    modify it under the same terms as Perl itself.
#
######################################################################
#
# version 0.004 10 Aug 2006 don't display coords, but display num points
# version 0.003  9 Aug 2006 reorganize javascript code for map into subroutine
# version 0.002  8 Aug 2006 can draw a line on the map and pop points
# version 0.001  8 Aug 2006 add code to create required tables
# version 0.000  8 Aug 2006 copied from imagesadmin
#
######################################################################

######################################################################
#
# Plans: 
# split maps and mapsadmin functions.  mapsadmin just creates tables
# clean up code
# 
# I note that mapsadmin and imagesadmin have a lot of the same code.  Perhaps making a table-creator admin would be beneficial
# "required tables in images.settings: ...."  "required tables in maps.settings: ...."
#
######################################################################

# to use modules installed in my user space
use lib "/home/thunderrabbit/perlmods/share/perl"; 
use lib "/home/thunderrabbit/perlmods/share/perl/5.8"; 

# load in the modules
use strict;
use CGI 3.20;  # new version is only in my local space.  It corrects a bug with hidden fields not displaying id
use CGI::Ajax;
use CGI::Cookie;
use Image::Magick;
use Error qw(:try);
use Switch;
# use HTML::GoogleMaps;
use Geo::Coordinates::UTM;

######################################################################
#
# This is the shortest technique I found to create my own errors objects
# Note "package main" after all the definitions
#
######################################################################
package Critical_error;            use base "Error";
package mustBeAdminError;          use base "Error";
package mustCreateTablesError;     use base "Error";
# package mustPopulateTablesError;   use base "Error";

package main;

require "mkdef.pl";
require "allowSource.pl";
require "DB_CDE.pl";  #  DBI code from Mike Schienle
require "setCookies.pl";
require "hash_io.pl";
require "draw_navigation.pl";

my $debug = 0;
my $q = new CGI;      # will be used for params, cookies, Ajax, html output

my @allowable_actions;  # this will be set initially after we do crititcal_settings_check and check_tables_in_db

my @these_required_tables_DNE;  # if we need to create tables, this will tell what we need to create.
my @these_tables_need_data;     # the tables listed here must have data, or there's no functionality in the program.
my @these_helpful_tables_DNE;   # some tables will give more functionality if they exist.  If they do not exist they are listed in this array

# general settings for images, output language, and db access are stored in text files that will be read into hashes, starting with %settings
my $settings_file = "/home/thunderrabbit/settings/maps.settings";
my %settings;   # specifies where various files and things are located, the password to get into the system, default sizes for pics
my %lang;       # all the language we output to users; allows various languages to be available
my %dbHash;     # information on how to log in to the images database

try {
    &critical_settings_check;
    &check_tables_in_db;
}
catch Critical_error with { &critical_error_handler }
catch mustBeAdminError with { &ask_for_admin_password }
catch mustCreateTablesError with { push (@allowable_actions, "add tables") }
# catch mustPopulateTablesError with { push (@allowable_actions, "populate") }
otherwise { &generic_error_handler; }
finally {  };

# DBI handles
my ($sth, $sql, $rv, $dbh, $dbData);

my $pjx = CGI::Ajax->new( 
#			  'tag_search' => \&tag_search,
			  'create_table' => \&create_table,
			  'refresh_SRS_pointlist' => \&refresh_SRS_pointlist,
			  'saveData' => \&saveData
			  );

my $ajax_javascript_debug = 1;
my $ajax_general_debug = 0;
$pjx->JSDEBUG($ajax_javascript_debug);
$pjx->DEBUG($ajax_general_debug);

# this outputs the html for the page.

print $q->header;  # not sure why this can't go inside sub main.

print $pjx->build_html($q,\&main,""); # The extra "" keeps Ajax.pm from causing "Use of uninitialized value" warnings.
#print &main;
sub main {
    my $html = "";

    $html .= $q->start_html(-title=>$lang{'title'},
			    -onLoad=>"load();",
			    -onUnload=>"GUnload()",
			    -script=>[{-language=>'JAVASCRIPT', -src=>$settings{'tabber js filename URL'}},     # creates the navigation tabs on the left
				      {-language=>'JAVASCRIPT', -src=>$settings{'boxover js filename URL'}},    # creates the tooltip items on tab labels
				      {-language=>'JAVASCRIPT',
				       -code=>"var tabberOptions= {'manualStartup':true}"} ],
			    -style=>{-src=>'/css/example.css',
				     -code=>'.tabber{display:none}'}
			    ) . "\n";
    
    $html .= &draw_AJAX_navigation("0main&images");

    $html .= "\n" . "<table width='100%' border='1' resize='true'><tr><td width='20%' valign='top'>\n";

    # begin search sidebar
    $html .= &sidebar_content;
    # end search sidebar
    $html .= "\n" . "</td> <td width='80%' valign='top'>\n";

    # begin main bar
    $html .= "\n" . $q->start_div({-id=>"mainbar", -style=>"border:1px solid green; width: 100%; height: 100%"}) . "\n";

    $html .= $q->end_div . $q->comment("ends (id=\"mainbar\")") . "\n";
    # end main bar

    $html .= "\n" . "</td></tr></table>\n";

    $html .= &allowAjaxSource;
    $html .= <<END_script;
<script type="text/javascript">

/* Since we specified manualStartup=true, tabber will not run after
   the onload event. Instead we run it now, to prevent any delay
   while images load.
*/

tabberAutomatic(tabberOptions);

</script>
END_script

    $html .= $q->end_html;
    return $html;
}

sub sidebar_content {
    my $html;
    if ($#allowable_actions > 0) {   # this would mean there is more than one option
	$html .= "\n" . $q->start_div({-class=>"tabber", -id=>"sidebartabs", -style=>"border:1px solid blue; width: 100%; height: 100%"}) . "\n";
    }

    foreach (@allowable_actions) {
	switch ($_) {
	    case "add tables"  { $html .= &sidebar_add_tables }
	    else               { $html .= $q->p($lang{"nothing to do"} . " " . $q->a({href=>"maps"}, "maps"))}
	}
    }
    if ($#allowable_actions > 0) {
	$html .= $q->end_div . $q->comment("ends (class=\"tabber\" id=\"sidebartabs\")") . "\n";
    }
#    $html .= &sidebar_search_tab('tag');    # added just for filler while trying to get admin login to not require entire screen refresh
    return $html;
}

##################################################################
# 
#  The guts of this could be wrapped within a wrapper that returns the <div> shell if needed
# 
##################################################################
sub sidebar_add_tables {
    my $html;

    if ($#allowable_actions > 0) {
	# Use -title=>"header=[hoverbox title] body=[hoverbox body]" to get a hoverbox.  use <h2> tag to label the tab
	$html .= "\n" . $q->start_div({-class=>"tabbertab", -id=>"sdt_tab", 
				       -style=>"border: 1px solid black; width: 100%; height: 480px; overflow: none", # THESE VALS NOT CAREFULLY CHOSEN
				       -title=>"header=[A] body=[$lang{'SDT tab hover body'}]"}) . "\n";
	$html .= "\n" . $q->h2("A") . "\n";

	$html .= "\n" . $q->start_div({-id=>"rdivSDT", 
				       -style=>"border: 1px solid black; width: 100%; height: 460px; overflow: auto"}  # THESE VALS NOT CAREFULLY CHOSEN
				      );
    }

    $html .= &sidebar_add_tables_html;

    if ($#allowable_actions > 0) {
	$html .= $q->end_div . $q->comment("ends (id=\"rdivSDT\")") . "\n";

	$html .= "\n" . $q->end_div . $q->comment("ends (class=\"tabbertab\" id=\"sdt_tab\")") . "\n";
    }

    return $html;

} # sidebar_add_tables

# I am debating between letting users create each table one at a time as they like, versus just creating all of them.  Version 2 is supposed to allow
# various tables to be created (not require all of them), but this logic was already written before deciding to force V1 to require all of them.  In
# the case of requiring all, it should just be part of the initialization, a la Gallery2, setup: Enter your new password twice; Enter DB details;
# these get written to file and then tables automagically created.

# In this case, there needs to be some feedback to the users as each table is created, but only if it was created correctly.
sub sidebar_add_tables_html {
    my $html = $q->p("must create these:");

    foreach (@these_required_tables_DNE) {
	$html .= $q->start_form;
	$html .= $q->button({-value=>$_, -onClick=>"create_table(['create_" . $_ . "'], ['mainbar'] ); return true;"});
	$html .= "\n" . $q->hidden({-id=>"create_" . $_, -value=>$_});
	$html .= $q->end_form;
    }

    return $html;
}

#######################################################################################################################
##   
##      mySQL code used to create tables:
##  
#######################################################################################################################
sub create_table {
    my @tables_to_create = split " ", $_[0];   # there is probably a better way to do this
    my $html;

    foreach (@tables_to_create) {
	$html .= "creating " . $_;
	my $sql;
	switch ($_) {

	    case "journeys"      { 
		$sql = " CREATE TABLE `$_` ( "
		    . "`journeyID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . "`title` VARCHAR( $settings{'max route title length'} ) NOT NULL, "
		    . "`lat` DOUBLE NOT NULL, "
		    . "`lng` DOUBLE NOT NULL, "
		    . "`zoom` INT( 2 ) NOT NULL, "
		    . "`comment` BLOB NULL) "
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by $ENV{'SCRIPT_NAME'}';";
	    }
	    case "journey_routes" {
		$sql = "CREATE TABLE `$_` ("
		    . " `journeyID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL,"
		    . " `sort` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `routeID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " INDEX (`journeyID`, `routeID`))"
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by $ENV{'SCRIPT_NAME'}';";
	    }
	    case "routes"      { 
		$sql = " CREATE TABLE `$_` ( "
		    . "`routeID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . "`startDate` DATETIME NULL, "
		    . "`endDate` DATETIME NULL, "
		    . "`title` VARCHAR( $settings{'max route title length'} ) NOT NULL, "
		    . "`lat` DOUBLE NOT NULL, "
		    . "`lng` DOUBLE NOT NULL, "
		    . "`zoom` INT( 2 ) NOT NULL, "
		    . "`comment` BLOB NULL, "
		    . "INDEX ( `startDate` , `endDate` )) "
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by $ENV{'SCRIPT_NAME'}';";
	    }
	    case "route_coords" {
		$sql = "CREATE TABLE `$_` ("
		    . " `routeID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `sort` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `lat` DOUBLE NOT NULL, "
		    . " `lng` DOUBLE NOT NULL, "
		    . "INDEX(`routeID`)) "
		    . " TYPE = myisam "
		    . "COMMENT = '$_ created by $ENV{'SCRIPT_NAME'}';";
	    }
	    case "tags" {
		$sql = "CREATE TABLE `tags` ("
		    . "`tagID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, "
		    . "`tag_sortname` VARCHAR( $settings{'max tag length'} ) NOT NULL, "
		    . "`tag_displayname` VARCHAR( $settings{'max tag length'} ) NOT NULL, "
		    . "INDEX ( `tag_sortname` ), "
		    . "UNIQUE ( `tag_displayname` )) "
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by $ENV{'SCRIPT_NAME'}';";
	    }
	    case "route_tags" {
		$sql = "CREATE TABLE `$_` ("
		    . " `routeID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL, "
		    . " `tagID` INT( $settings{'max key length'} ) UNSIGNED NOT NULL,"
		    . " INDEX (`routeID`, `tagID`))"
		    . "TYPE = myisam "
		    . "COMMENT = '$_ created by $ENV{'SCRIPT_NAME'}';";
	    }

	    else               { $html .= $q->p($lang{"wot's this?"}) }
	}

	if ($sql) {
#	    $html .= $sql;
	    $sth = $dbh->prepare( $sql );
	    $sth->execute();
####   for some reason I can't get it to catch a problem with the above line
####	    warn mkdef($dbh->errstr);
	}
    }

    return $html;
}


############################################################################################################
##
##  &critical_settings_check is supposed to make sure the system is fit for use whatsoever.
##
##  Basically:
##  *  We must be able to read the settings files into hashes
##  *  tabber.js and boxover.js are required
##  *  We must be able to access the database
##
##  If NO to any of the above, it's a critical failure from which this program cannot recover.
##    
##  But, try to fail gracefully; errors here will most likely fail during initial setup, 
##  so the user (admin) should be given an idea of which file didn't exist or had a problem, etc..
##
##  &hash_read and &DBConnect will throw errors if they fail.
##    
############################################################################################################
sub critical_settings_check {

    # this is the root of all settings in the images project
    &hash_read(\%settings,$settings_file);

    # this allows the user interface to be in different languages
    unless ($settings{'language file'}) {
	die with Critical_error(-text=>"No 'language file' entry in $settings_file.  It should point to a file with text output lines in your preferred language.");
    }
    &hash_read(\%lang,$settings{'language file'});

    unless (&admin_password_exists) {
	die with Critical_error(-text=>$lang{'admin disabled'});
    }

    # This is before the rest so random people won't see (m)any error messages by snooping around
    # this does not die, but prints an admin password entry screen before exiting
    unless (&isAdmin) {
	throw mustBeAdminError(-text=>$lang{'admin must login'});
    }

    # info on how to connect to the database
    unless ($settings{'dbHash file'}) {
	my $err_txt = $lang{'no dbHash file'} || "No 'dbHash file' entry in $settings_file.  It should point to a file with mySQL connection settings.";
	die with Critical_error(-text=>$err_txt);
    }
    &hash_read(\%dbHash,$settings{'dbHash file'});

    unless (-f $settings{'URL file base'} . $settings{'tabber js filename URL'}) {
	my $err_txt = $lang{'no tabber.js file'} || "No 'tabber js filename URL' entry in $settings_file.  It should point to publicly available tabber.js";
	die with Critical_error(-text=>$err_txt);
    }

    unless (-f $settings{'URL file base'} . $settings{'boxover js filename URL'}) {
	my $err_txt = $lang{'no boxover.js file'} || "No 'boxover js filename URL' entry in $settings_file.  It should point to publicly available boxover.js";
	die with Critical_error(-text=>$err_txt);
    }

    # Make sure we can get to the database.
    $dbh = &DBConnect(%dbHash);

}  # &critical_settings_check

sub admin_password_exists {
   return mkdef($settings{'maps admin password'}) ? 1 : 0;
}

sub isAdmin {
    my %read_cookies = fetch CGI::Cookie;
    my %write_cookies;
    my $admin_password;
    $debug && warn ("in isAdmin");
    if ($admin_password = $q->param($settings{'name of admin pw field'})) {
	$write_cookies{$settings{'name of admin pw field'}} = $admin_password;
	&setCookies(%write_cookies);
    }
    elsif ($read_cookies{$settings{'name of admin pw field'}}) {
	$admin_password = $read_cookies{$settings{'name of admin pw field'}}->value;
    }

    if ($admin_password eq $settings{'maps admin password'}) {
	return 1;
    }
    # else
    0;    # somehow this seems more dramatically false.
}

######################################################
##
##  We have come to a problem that cannot be resolved by this script.
##  Exit and display hopefully useful information.
##
######################################################
sub critical_error_handler {
    my $err = shift;

    print $q->header;
    print $q->start_html($lang{'title'});
    print $q->p("Sorry.. ", $err->{"-text"});
    print $q->p("This is a critical error from which I cannot recover.");
    print $q->end_html;

    warn ("A critical error occured: ", $err->{"-text"});
    exit;
}


######################################################
##
##  We have come to a problem that can be resolved by the
##  administrator.  But we didn't find a param or cookie with
##  (correct) administrator password, so ask for it.
##
######################################################
sub ask_for_admin_password {

    print $q->header;
    print $q->start_html($lang{'title'});
    print $q->p($lang{'enter admin password'});
    print $q->start_form;
    print $q->textfield(-name=>$settings{'name of admin pw field'},-size=>20,-maxlength=>20), "\n";
    print $q->end_form;
    print $q->end_html;
    exit;
}

sub generic_error_handler {
    warn ("imagesadmin error handling is in otherwise-BLOCK, which means we are catching an unexpected error.");
    my $err = shift;
    warn ($err->{"-text"});

    print $q->header;
    print $q->start_html("imagesadmin");
    print $q->p($err);
    print $q->end_html;
    exit;
}


############################################################################################################
#
#  &check_tables_in_db ensures all tables exist.  In version 2 of this code, we will start looking a bit more subtley
#
############################################################################################################
sub check_tables_in_db {
    
    my @row;
    my %table_exists;
    my @have_useful_table;
    my %num_rows;

    $sth = $dbh->prepare("show table status;"); 
    $sth->execute;

    # keep track of tables that exist
    while (@row = $sth->fetchrow_array) {
	my $tablename = $row[0];
	my $numrows = $row[4];
	$debug && warn ($tablename . ":" . $numrows);
	$table_exists{$tablename} = 1;
	$num_rows{$tablename} = $numrows;
    }

    # compare existing tables (%table_exists) to list of required tables ($settings{'required tables'})
    foreach my $needed_table (split " ", $settings{'required tables'}) {
	unless ($table_exists{$needed_table}) {
	    push (@these_required_tables_DNE, $needed_table);
	}
    }

    unless ($#these_required_tables_DNE == -1) {
	throw mustCreateTablesError();
    }
    else 
    {
	push (@allowable_actions, "add routes");  # this is a hack, but I don't have the overview to see where this should go.  Somewhere up in the error handling code near the top of the program..
    }
}
